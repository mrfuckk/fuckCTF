题目地址：http://120.24.86.145:8002/web3/
打开不停的弹窗提示flag在这里
抓个包看看：
GET /web3/ HTTP/1.1
Host: 120.24.86.145:8002
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Referer: http://123.206.31.85/challenges
X-Skyzip-Mode: none
Connection: close
Upgrade-Insecure-Requests: 1
If-Modified-Since: Sat, 15 Apr 2017 14:57:03 GMT
If-None-Match: "58f234bf-cc9"
Cache-Control: max-age=0

看见两个关键字If-None-Match:If-Modified-Since
百度查了下：
If-None-Match 是一个条件式请求首部。对于 GETGET 和 HEAD 请求方法来说，当且仅当服务器上没有任何资源的 ETag 属性值与这个首部中列出的相匹配的时候，
服务器端会才返回所请求的资源，响应码为  200  。对于其他方法来说，当且仅当最终确认没有已存在的资源的  ETag 属性值与这个首部中所列出的相匹配的时候，
才会对请求进行相应的处理。

对于  GET 和 HEAD 方法来说，当验证失败的时候，服务器端必须返回响应码 304 （Not Modified，未改变）。对于能够引发服务器状态改变的方法，则返回 
412 （Precondition Failed，前置条件失败）。需要注意的是，服务器端在生成状态码为 304 的响应的时候，必须同时生成以下会存在于对应的 200 响应中的首部：
Cache-Control、Content-Location、Date、ETag、Expires 和 Vary 。

ETag 属性之间的比较采用的是弱比较算法，即两个文件除了每个比特都相同外，内容一致也可以认为是相同的。例如，如果两个页面仅仅在页脚的生成时间有所不同，
就可以认为二者是相同的。

当与  If-Modified-Since  一同使用的时候，If-None-Match 优先级更高（假如服务器支持的话）。

以下是两个常见的应用场景：

    采用 GET 或 HEAD  方法，来更新拥有特定的ETag 属性值的缓存。
    采用其他方法，尤其是  PUT，将 If-None-Match used 的值设置为 * ，用来生成事先并不知道是否存在的文件，可以确保先前并没有进行过类似的上传操作，
    防止之前操作数据的丢失。这个问题属于更新丢失问题的一种。
    
    
   他说当服务器上面咩有ETag属性值与首部匹配时才200，于是把58f234bf-cc9的9去掉返回这个包：
  
HTTP/1.1 200 OK
Server: nginx
Date: Tue, 23 Jan 2018 12:20:46 GMT
Content-Type: text/html
Content-Length: 3273
Last-Modified: Sat, 15 Apr 2017 14:57:03 GMT
Connection: close
ETag: "58f234bf-cc9"
Accept-Ranges: bytes

<html>  
<head>  
<title>BKCTF-WEB3</title>  
<script language="javascript">   
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
alert("flag¾ÍÔÚÕâÀï");  
alert("À´ÕÒÕÒ°É"); 
<!--&#75;&#69;&#89;&#123;&#74;&#50;&#115;&#97;&#52;&#50;&#97;&#104;&#74;&#75;&#45;&#72;&#83;&#49;&#49;&#73;&#73;&#73;&#125;-->
</script>  
</head>  
</html>  


用python写个脚本：
s='&#75;&#69;&#89;&#123;&#74;&#50;&#115;&#97;&#52;&#50;&#97;&#104;&#74;&#75;&#45;&#72;&#83;&#49;&#49;&#73;&#73;&#73;&#125'
key=s.split(';')
flag=''
for i in key:
    flag+=chr(int(i[2:]))
print flag

flag是KEY{J2sa42ahJK-HS11III}








    
    
    
    
    
    
    
    
